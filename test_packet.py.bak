#!/usr/bin/env python3
"""Test packet parsing for Ezville Wallpad."""

def verify_checksum(packet):
    """Verify packet checksum."""
    if len(packet) < 2:
        return False
    
    # Calculate checksum (XOR of all bytes except last two)
    checksum = 0
    for b in packet[:-2]:
        checksum ^= b
    
    # Calculate ADD (sum of all bytes except last one)
    add = sum(packet[:-1]) & 0xFF
    
    # Get expected values from packet
    expected_checksum = packet[-2]
    expected_add = packet[-1]
    
    print(f"Checksum: calc=0x{checksum:02X}, expected=0x{expected_checksum:02X}")
    print(f"ADD: calc=0x{add:02X}, expected=0x{expected_add:02X}")
    
    # Both checksum and add must match
    return checksum == expected_checksum and add == expected_add

def parse_packet(hex_str):
    """Parse a hex string packet."""
    # Remove spaces and convert to bytes
    hex_str = hex_str.replace(' ', '')
    packet = bytes.fromhex(hex_str)
    
    print(f"\nPacket: {packet.hex()}")
    print(f"Length: {len(packet)} bytes")
    
    if len(packet) < 4:
        print("Packet too short!")
        return
    
    print(f"Header: F7 {packet[1]:02X} {packet[2]:02X} {packet[3]:02X}")
    print(f"Device ID: 0x{packet[1]:02X}")
    print(f"Device Num: 0x{packet[2]:02X} (dec: {packet[2]})")
    print(f"Command: 0x{packet[3]:02X}")
    
    # Check if state packet
    if packet[3] == 0x81:
        print("This is a STATE packet")
        if len(packet) > 4:
            data_len = packet[4]
            print(f"Data length: {data_len}")
            if len(packet) >= 5 + data_len + 2:
                data = packet[5:5+data_len]
                print(f"Data: {data.hex()}")
    
    # Verify checksum
    if verify_checksum(packet):
        print("Checksum: VALID")
    else:
        print("Checksum: INVALID")

# Test the example packet
test_data = "f70e110100e900f70e118104000000006d08f70e120100ea02"
print("Original data:", test_data)

# Split by f7
packets = []
current = ""
for i in range(0, len(test_data), 2):
    byte = test_data[i:i+2]
    if byte == "f7" and current:
        packets.append(current)
        current = "f7"
    else:
        current += byte

if current:
    packets.append(current)

print(f"\nFound {len(packets)} packets:")
for i, p in enumerate(packets):
    print(f"\nPacket {i+1}:")
    parse_packet(p)
